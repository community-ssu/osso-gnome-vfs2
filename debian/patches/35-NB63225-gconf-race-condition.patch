Index: modules/http-proxy.c
===================================================================
--- modules/http-proxy.c	(revision 13555)
+++ modules/http-proxy.c	(arbetskopia)
@@ -524,14 +524,16 @@ notify_gconf_value_changed(GConfClient *
     }
 }
 
-void proxy_init(void)
+static gboolean 
+proxy_init_cb (gpointer user_data)
 {
     GError *gconf_error = NULL;
     gboolean use_proxy;
     gboolean use_proxy_auth;
 
+    g_mutex_lock(gl_mutex);
+
     gl_client = gconf_client_get_default();
-    gl_mutex = g_mutex_new();
 
     gconf_client_add_dir(gl_client, PATH_GCONF_GNOME_VFS,
 			 GCONF_CLIENT_PRELOAD_ONELEVEL, &gconf_error);
@@ -578,6 +580,25 @@ void proxy_init(void)
     } else {
 	set_proxy_auth(use_proxy_auth);
     }
+
+    g_mutex_unlock(gl_mutex);
+
+    return FALSE;
+}
+
+void proxy_init(void)
+{
+    gl_mutex = g_mutex_new();
+
+    /* This fixes NB#63225:
+     *
+     * This is a work around to a race condition caused by the GConf API being
+     * used in a thread, which is not allowed since GConf isn't thread safe. We
+     * use g_idle_add() here to do the GConf calls from the main thread. Note,
+     * this is fine where we have a main loop, but in cases where we don't have
+     * a main loop this work around is not effective.
+     */
+    g_idle_add (proxy_init_cb, NULL);
 }
 
 
